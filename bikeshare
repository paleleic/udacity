import time
import pandas as pd
import numpy as np

CITY_DATA = { 'chicago': 'chicago.csv',
              'new york city': 'new_york_city.csv',
              'washington': 'washington.csv' }

def get_filters():
    """
    Asks user to specify a city, month, and day to analyze.

    Returns:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    """
    print('Hello! Let\'s explore some US bikeshare data!')
    # TO DO: get user input for city (chicago, new york city, washington). HINT: Use a while loop to handle invalid inputs
    city = input('Choose a city: ').lower()
    while (city not in ['chicago', 'new york city', 'washington']):
        city = input('Looks like we only have data for 3 cities! Please choose between- Chicago, New York City, or Washington: ').lower()
    else:
    # TO DO: get user input for month (all, january, february, ... , june)
        month = input('Please select a month from January through June, or choose all: ').lower()
        while (month not in ['january', 'february', 'march', 'april', 'may', 'june', 'all']):
            month = input('Please choose between- January, February, March, April, May, June or all: ').lower()
    # TO DO: get user input for day of week (all, monday, tuesday, ... sunday)
        else:
            day = input('Please select a day of the week or choose all: ').lower()
            while (day not in ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday','all']):
                day = input('Please choose between- Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday or all: ').lower()
            else:
                print('Great! Now, let\'s explore {} in {} on {}!'.format(city, month, day))
    print('-'*40)
    return city, month, day


def load_data(city, month, day):
    """
    Loads data for the specified city and filters by month and day if applicable.

    Args:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    Returns:
        df - Pandas DataFrame containing city data filtered by month and day
    """
    df = pd.read_csv(CITY_DATA[city])
    return df


def time_stats(df):
    """Displays statistics on the most frequent times of travel."""

    print('\nCalculating The Most Frequent Times of Travel...\n')
    start_time = time.time()

    # TO DO: display the most common month
    df['Start Time']=pd.to_datetime(df['Start Time'])
    df['month']=df['Start Time'].dt.month
    df['day']=df['Start Time'].dt.weekday_name
    df['hour']=df['Start Time'].dt.hour
    print(df.head())
    if month != 'all':
        months= ['january', 'february', 'march', 'april', 'may', 'june']
        month= months.index(month)+1
        df=df[df['month']==month]

    if day != 'all':
        df=df[df['day']==day.title()]
        
    popular_month=df['month'].mode()[0]
    print('Most Popular month: ', popular_month)
    # TO DO: display the most common day of week
    
    # TO DO: display the most common start hour
    popular_hour=df['hour'].mode()[0]
    print('Most Popular Start Hour: ', popular_hour)
    return df

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def station_stats(df):
    """Displays statistics on the most popular stations and trip."""

    print('\nCalculating The Most Popular Stations and Trip...\n')
    start_time = time.time()

    # TO DO: display most commonly used start station


    # TO DO: display most commonly used end station


    # TO DO: display most frequent combination of start station and end station trip


    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)
